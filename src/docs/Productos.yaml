paths:
  /api/products/:
    get:
      summary: Obtiene todos los productos para vista User
      tags:
        - Products
      responses:
        "200":
          description: 'Realiza render a la página de handlebars viewproducts en un objeto que contiene los productos y los datos del user'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#components/schemas/Product'
        "500":
          description: '{error: Error reading products indicate}'
    post:
      summary: Crea un producto nuevo
      tags:
        - Product
      responses:
        "201":
          description: 'Responde con el producto creado'
          content:
            application/json:
              schema:
                  $ref: '#components/schemas/Product'
        "403":
          description: 'User with email ${email} is not premium'
        "404":
          description: 'User with email ${email} not found'
        "500":
          description: 'Error to try create product'
  /api/realtimeproducts/:
    get:
      summary: Obtiene todos los productos para vista Admin y/o User premium
      tags:
        - Products
      responses:
        "200":
          description: 'Realiza render a la página de handlebars realtimeproducts en un objeto que contiene los productos'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#components/schemas/Product'
        "500":
          description: 'Internal error'
  /api/products/{pid}:
    get:
      summary: Obtiene un producto especifico buscado por Id
      tags:
        - Product
      parameters:
        - name: pid
          in: path
          required: true
          description: id del producto que se desea buscar
          schema:
            $type: String
      responses:
        "200":
          description: 'Responde con el producto encontrado en un objeto'
          content:
            application/json:
              schema:
                  $ref: '#components/schemas/Product'
        "404":
          description: 'The product with ID ${pid} doesn t exist'
        "500":
          description: 'Internal error'
    put:
      summary: Actualiza un producto nuevo
      tags:
        - Product
      parameters:
        - name: pid
          in: path
          required: true
          description: Id del producto que se desea modificar
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updateProduct'
      responses:
        "201":
          description: 'Responde con el producto modificado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "403":
          description: 'User with email ${req.user.email} is not premium'
        "404":
          description: 'Error trying to find product'
        "406":
          description: 'Error trying to update product'
    delete:
        summary: Borra un producto especifico buscado por Id
        tags:
          - Product
        parameters:
          - name: pid
            in: path
            required: true
            description: id del producto que se desea borrar
            schema:
              $type: String
        responses:
          "201":
            description:  Product deleted...
          "403":
            description:  User with email ${req.user.email} is not premium
          "404_NotExists":
            description:  The product with ID ${pid} doesn t exist
          "404_EDeleting":
            description:  Error trying to delete product
          "404_NotFound":
            description:  Error product not found
          "404_UsNotFound":
            description:  Error user not found
          "404_AccessDenied":
            description:  Access denied for deleted product
          "500":
            description: Internal error
  /api/allProducts/:
    get:
      summary: Obtiene todos los productos
      tags:
        - Products
      responses:
        "200":
          description: 'Responde con un array de los productos'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#components/schemas/Product'
        "500":
          description: 'Internal error'  
  /api/mockingproducts/:
    get:
      summary: Crea 100 productos
      tags:
        - Products
      responses:
        "200":
          description: 'Responde con un array de los productos'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#components/schemas/Product'
        "500":
          description: 'Error generate products'  
  /api/carts/:
    get:
      summary: Obtiene todos los carritos existentes
      tags: 
       - Carts
      responses:
        "200":
          description: Busca todos los carritos existentes en la base de datos
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#components/schemas/Cart'
        "404":
          description: Error trying to find carts
    post:
      summary: Crea nuevo carrito
      tags: 
       - Cart
      responses:
        "201":
          description: Responde con el carrito creado
          content:
            application/json:
              schema:
                  $ref: '#components/schemas/Cart'
        "404":
          description: Error trying create Cart
  /api/cartid:
    get:
      summary: Devuelve un carrito por Id
      tags: 
       - Cart
      responses:
        "200":
          description: Devuelve un objeto con el carrito del Usuario que tiene su respectivo Id del cart
          content:
            application/json:
              schema:
                  $ref: '#components/schemas/Cart'
        "404":
          description: Error trying to find cart
  /api/carts/{cid}:
    get:
      summary: Devuelve un carrito por Id
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito que se desea buscar
          schema:
            $type: String
      responses:
        "200":
          description: Devuelve el render de un objeto Cart para handlebars con todos sus campos.
          content:
            application/json:
              schema:
                  $ref: '#components/schemas/Cart'
        "404":
          description: Error trying to find cart
    delete:
      summary: Borra todos los productos del carrito
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito que se desea borrar
          schema:
            $type: String
      responses:
        "201":
          description: Devuelve el render del carrito actualizado, sin ningun producto.
        "404_NotFound": 
          description: Error trying to find cart
        "404_NotUpdate": 
          description: Error trying to update
        "404_CartEmpty": 
          description: This cart is empty'
        "500":
          description: Internal error
  /carts/{cid}/products/{pid}:
    put:
      summary: Devuelve un carrito por Id
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          description: Id del carrito en el que se encuentra el producto que se desea modificar
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: Id del producto que se desea modificar
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  default: 1
      responses:
        "201":
          description: Product ${product.title} has been added to your cart
        "404_NotProduct":
          description: Error trying to find product
        "404_NotCart":
          description: Error trying to find cart
        "404_Owner":
          description: Error, owner cannot add a product to their own cart...
        "500":
          description: Internal error
    delete:
      summary: Devuelve el carrito actualizado sin el producto seleccionado
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          description: Id del carrito en el que se encuentra el producto que se desea modificar
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: Id del producto que se desea sacar del carrito
          schema:
            type: string
      responses:
        "201":
          description: Devuelve el carrito actualizado sin el producto seleccionado
          content:
            application/json:
              schema:
                  $ref: '#components/schemas/Cart'
        "404_NotProduct":
          description: Error trying to find cart or product
        "404_Notlength":
          description: Not found
        "500":
          description: Internal error
  /carts/{cid}/purchase:
    post:
      summary: Devuelve un carrito por Id
      tags:
        - Cart
      parameters:
        - name: cid
          in: path
          required: true
          description: Id del carrito con el que se va a finalizar la compra
          schema:
            type: string
      responses:
        "201":
          description: Devuelve el carrito vacio y el ticket de compra del mismo finalizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    $ref: '#components/schemas/Cart'
                  ticket:
                    $ref: '#components/schemas/Ticket' 
        "500":
          description: Error trying create ticket 

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado de mongo
        title: 
          type: String
          description: Nombre del producto
        description: 
          type: String
          description: Descripción del producto
        code: 
          type: String
          description: Código del producto
        price: 
          type: Number
          description: Precio del producto
        status: 
          type: Boolean
          description: Estado del producto
        stock: 
          type: String
          description: Cantidad disponible del producto
        category: 
          type: String
          description: Categoria del producto
        thumbnail: 
          type: String
          description: Imagen del producto
        owner: 
          type: String
          description: Creador del producto
      example:
        _id: ObjectId("6512fce8413cb83b38fb3cc9")
        title: "Licensed Steel Bike"
        description: "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design"
        code: "43910"
        price: 556
        status: true
        stock: 2
        category: "Health"
        thumbnail: "https://loremflickr.com/640/480?lock=5986278562594816"
        owner: "admin"
    Ticket:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado de mongo
        code:
          type: String
          description: Codigo unico de compra
        purcharser_datetime:
          type: Date
          description: Fecha y hora de cuandos se realizo la compra
        amount:
          type: integer
          description: Costo total de los productos solicitados en la compra
        purcharser:
          type: String
          description: Mail del comprador
    Cart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado de mongo
        name: 
          type: String
          description: Nombre del carrito
        products: 
          type: Array
          description: Es una array que contiene los productos del carrito
          items:
            type: object
            properties:
              product:
                type: ObjectId
                description: Id autogenerado de mongo
                ref: Product
              quantity:
                type: integer
                description: Cantidad del producto especifico solicitado en el carrito.
      example:
        _id: ObjectId("64ec369e32ce0b1889ad368b")
        name: "Mi carrito de compras"
        products: 
          - product: "64e7bc2b0913af46db638888"
            quantity: 1
          - product: "64e7bc2b0913af46db638888"
            quantity: 1
  requestBodies:
    updateProduct:
      type: object
      properties:
        title: 
          type: String
          description: Nombre del producto
        description: 
          type: String
          description: Descripción del producto
        code: 
          type: String
          description: Código del producto
        price: 
          type: Number
          description: Precio del producto
        status: 
          type: Boolean
          description: Estado del producto
        stock: 
          type: String
          description: Cantidad disponible del producto
        category: 
          type: String
          description: Categoria del producto
        thumbnail: 
          type: String
          description: Imagen del producto
        owner: 
          type: String
          description: Creador del producto
      example:
        title: "Test update product"
        description: "This is a prove test update product"
        code: "43910"
        price: 5555
        status: false
        stock: 2222
        category: "Health"
        thumbnail: "https://loremflickr.com/640/480?lock=5986278562594816"
        owner: "admin"